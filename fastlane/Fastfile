# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Build Frameworks"
  lane :build_frameworks do

    checkout()

    build_iglistkit()
    build_pinremoteimage()
    build_asyncdisplaykit()
    build_other()

    generate_manifest()

    Dir.chdir("..") do
      matching_files = Dir.glob('archives')
      FileUtils.rm_rf(*matching_files)
      UI.message "Deleted archives: #{matching_files.join(", ")}"
    end

  end

  desc "Checkout dependencies"
  private_lane :checkout do 
    Dir.chdir("..") do
      sh("carthage checkout")
    end
  end

  desc "Build Other Dependencies"
  private_lane :build_other do 
    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "libcmark_gfm"
    )

    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "Maaku"
    )

    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "XCoordinator"
    )

    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "DeepLinkKit"
    )

    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "Lottie_iOS"
    )

    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "LoremSwiftum-iOS"
    )
  end

  desc "Build AsyncDisplayKit"
  private_lane :build_asyncdisplaykit do 
    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "AsyncDisplayKit"
    )
  end

  desc "Build IGListKit"
  private_lane :build_iglistkit do 
    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "IGListDiffKit"
    )

    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "IGListKit"
    )

    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "IGListSwiftKit"
    )
  end

  desc "Build PINRemoteImage"
  private_lane :build_pinremoteimage do
    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "libwebp"
    )

    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "PINOperation"
    )

    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "PINCache"
    )

    build_xcframework(
      workspace: "SpaceFrameworks.xcworkspace",
      scheme: "PINRemoteImage"
    )
  end

  desc "Build XCFramework"
  private_lane :build_xcframework do |options|
    worspace = options[:workspace]
    scheme = options[:scheme]
    build_settings = [["SKIP_INSTALL", "NO"], ["BUILD_LIBRARY_FOR_DISTRIBUTION", "YES"]]

    xcodebuild(
      workspace: worspace,
      scheme: scheme,
      archive: true,
      xcargs: "-sdk iphonesimulator",
      build_settings: build_settings,
      destination: "generic/platform=iOS Simulator",
      archive_path: "archives/#{scheme}-simulator.xcarchive"
    )

    xcodebuild(
      workspace: worspace,
      scheme: scheme,
      archive: true,
      xcargs: "-sdk iphoneos",
      build_settings: build_settings,
      destination: "generic/platform=iOS",
      archive_path: "archives/#{scheme}-iOS.xcarchive"
    )

    # xcodebuild(
    #   workspace: worspace,
    #   scheme: scheme,
    #   archive: true,
    #   xcargs: "-sdk macosx",
    #   build_settings: build_settings,
    #   destination: "platform=macOS,arch=x86_64,variant=Mac Catalyst",
    #   archive_path: "archives/#{scheme}-macCatalyst.xcarchive"
    # )

    xcframework_path = "xcframeworks/#{scheme}.xcframework"

    simulator_archive = "archives/#{scheme}-simulator.xcarchive"
    device_archive = "archives/#{scheme}-iOS.xcarchive"

    simulator_framework = Dir.entries("../#{simulator_archive}/Products/Library/Frameworks").select { |i| i.end_with?(".framework") }.first
    device_framework = Dir.entries("../#{device_archive}/Products/Library/Frameworks").select { |i| i.end_with?(".framework") }.first

    create_xcframework(
      frameworks: [
        "#{simulator_archive}/Products/Library/Frameworks/#{simulator_framework}", 
        "#{device_archive}/Products/Library/Frameworks/#{device_framework}"], 
      output: xcframework_path
    )

    zip(
      path: xcframework_path,
      output_path: "#{xcframework_path}.zip"
    )

    Dir.chdir("..") do
      matching_files = Dir.glob(xcframework_path)
      FileUtils.rm_rf(*matching_files)
      UI.message "Deleted xcframework: #{matching_files.join(", ")}"
    end

  end

  desc "Generate Package.swift"
  private_lane :generate_manifest do

    manifest_filename = 'Package.swift'
    file_content = '''
// swift-tools-version:5.3
// The swift-tools-version declares the minimum version of Swift required to build this package.

import PackageDescription

let package = Package(
    name: "SpaceFrameworks",
    platforms: [.iOS(.v11)],
    products: [
      // Products define the executables and libraries a package produces, and make them visible to other packages.
      .library(
          name: "Texture",
          targets: ["AsyncDisplayKit"]
      ),
      .library(
          name: "IGListKit",
          targets: ["IGListKit", "IGListSwiftKit", "IGListDiffKit"]
      ),
      .library(
          name: "Markdown",
          targets: ["libcmark_gfm", "Maaku"]
      ),
      .library(
          name: "PINRemoteImage",
          targets: ["PINRemoteImage", "libwebp", "PINCache", "PINOperation"]
      ),
      .library(
          name: "XCoordinator",
          targets: ["XCoordinator"]
      ),
      .library(
          name: "DeepLinkKit",
          targets: ["DeepLinkKit"]
      ),
      .library(
          name: "Lottie",
          targets: ["Lottie"]
      ),
      .library(
          name: "LoremSwiftum",
          targets: ["LoremSwiftum"]
      ),
    ],
    dependencies: [
      // Dependencies declare other packages that this package depends on.
      // .package(url: /* package url */, from: "1.0.0"),
    ],
    targets: []
)
'''

    Dir.chdir("..") do
      Dir.entries("xcframeworks").select { |i| i.end_with?(".zip") }.map{ |framework|
        path = "xcframeworks/#{framework}"
        checksum = sh("swift package compute-checksum #{path}")
      }
    end

  end
end
